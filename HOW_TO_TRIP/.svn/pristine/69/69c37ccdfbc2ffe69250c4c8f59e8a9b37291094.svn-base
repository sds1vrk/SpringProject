package newChat;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.atomic.AtomicInteger;

import javax.servlet.http.HttpSession;
import javax.websocket.EndpointConfig;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import javax.servlet.*;


@ServerEndpoint(value ="/broadcasting", configurator=GetHttpSessionConfigurator.class) //클라이언트가 접속할 때 사용될 URI
public class ChatAnnotation {
	public static ArrayList <String>arr=new ArrayList<>();
	public static ArrayList <String>res=new ArrayList<>();


    private static final Set<ChatAnnotation> connections =new CopyOnWriteArraySet<ChatAnnotation>();

    // 클라이언트가 새로 접속할 때마다 한개의 Session 객체가 생성된다.

    // Session 객체를 컬렉션에 보관하여 두고 해당 클라이언트에게 데이터를 전송할 때마다 사용한다
    Session session;
	private HttpSession httpSession;
   
    @OnOpen
    public void start(Session session, EndpointConfig config) {
        System.out.println("클라이언트 접속됨 ");
        //Session:접속자마다 한개의 세션이 생성되어 데이터 통신수단으로 사용됨
        //한개의 브라우저에서 여러개의 탭을 사용해서 접속하면 Session은 서로 다르지만 HttpSession 은 동일함
        this.session = session;
        this.httpSession=(HttpSession)config.getUserProperties().get(HttpSession.class.getName());
        connections.add(this);
     	String id=(String)httpSession.getAttribute("id");
		arr.add(id);
		for (int j = 0; j < arr.size(); j++) {
			if (!res.contains(arr.get(j))) {
				res.add(id);
			}
		}
         
        String message = String.format("*%s %s %s", id," has joined. 현재 접속자 수:", res.size());
        broadcast(message);
     
        System.out.println("res"+res);
        broadcast("현재접속자:"+res.toString());
    }
    
    @OnClose
    public void end() {
    	  // 한 클라이언트의 퇴장을 모든 이용자에게 알린다
        connections.remove(this);
        httpSession.invalidate();
        res.remove((String)httpSession.getAttribute("id"));
      
    }
    
// 현재 세션과 연결된 클라이언트로부터 메시지가 도착할 때마다 새로운 쓰레드가 실행되어 incoming()을 호출함
    @OnMessage
    public void incoming(String message) {
    	if(message==null || message.trim().equals("")) return;
    	String filteredMessage = String.format("%s", message);
    	broadcast(filteredMessage);
    }
    

    @OnError
    public void onError(Throwable t) throws Throwable {
        System.err.println("Chat Error: " + t.toString());
    }
 
    // 현재 세션으로부터 도착한 메시지를 모든 접속자에게 전송한다
   private void broadcast(String msg) {
       Iterator<ChatAnnotation> ss = connections.iterator();
        
        for (int i=0;i<connections.size();i++) {
           ChatAnnotation client = ss.next();
           try {
                synchronized (client) {
                    // 서버에 접속 중인 모든 이용자에게 메지지를 전송한다
                    String temp = String.format("%s", res);
     
                	client.session.getBasicRemote().sendText(msg);
               
                	
                	}
            } catch (IllegalStateException ise){
            	
               // 특정 클라이언트에게 현재 메시지 보내기 작업 중인 경우에 동시에 쓰기작업을 요청하면 오류 발생함
               if(ise.getMessage().indexOf("[TEXT_FULL_WRITING]")!=-1) {
                  new Thread() {
                     @Override
                     public void run() {
                        while(true) {
                           try{
                              client.session.getBasicRemote().sendText(msg);
                              break;
                           }catch(IllegalStateException _ise){
                              try {
                     Thread.sleep(100); // 메시지 보내기 작업을 마치도록 기다려준다
                     } catch (InterruptedException e) {}
                           }
                           catch(IOException ioe){
                              ioe.printStackTrace();
                           }
                        }
                     }
                  }.start();
               }
            } catch (Exception e) {

               // 메시지 전송 중에 오류가 발생(클라이언트 퇴장을 의미함)하면 해당 클라이언트를 서버에서 제거한다
                System.err.println("Chat Error: Failed to send message to client:"+e);
                connections.remove(client);
                try {
                   // 접속 종료
                    client.session.close();
                 
                    
                } catch (IOException e1) {
                    // Ignore
                }

              
            }
        }
    }

}